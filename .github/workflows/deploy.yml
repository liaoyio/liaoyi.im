# 使用 pnpm 构建Next.js静态站点，并部署到 GitHub Pages 的工作流

name: Deploy Next.js site to Pages # workflow 名称
#  以下两种情况下触发 workflow
on:
  # 当代码推送到 main 分支时自动运行
  push:
    branches: [main]

  # 手动点击 GitHub Actions 的 “Run workflow” 按钮时运行
  workflow_dispatch:

# 🔐 权限配置：设置 GITHUB_TOKEN 权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 🚦 并发控制：防止同时部署多个版本。相同的部署会排队，但不会中断当前进行中的部署
concurrency:
  group: pages
  cancel-in-progress: false

# 👷 构建 Job
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "store-path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store-path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Pages # 配置 GitHub Pages
        uses: actions/configure-pages@v4

      - name: Restore Next.js cache # 使用 Next.js 的构建缓存，加快编译速度。
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # 每当包或源文件发生更改时，生成新的缓存
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # 如果源文件已更改，但包未更改，则使用之前的缓存构建
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install

      - name: Build with Next.js
        run: pnpm build

      - name: Upload artifact # 上传打包好的文件
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # 🚀 部署 Job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # 等 build 任务完成后再执行部署
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
